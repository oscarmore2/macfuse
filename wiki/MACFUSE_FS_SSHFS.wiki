#summary The SSH File System for MacFUSE
#labels sshfs

= The SSH File System for MacFUSE =

To use the MacFUSE version of the SSH file system (sshfs), you must have the MacFUSE package installed. Please read the [QUICKER_START_GUIDE] document to learn how to install that package.

An easy way to use sshfs with MacFUSE is to get `sshfs.app`. Please look under the "Downloads" tab of this project to download it.

*NB: If you are running an older version of sshfs, please be sure to upgrade to the latest version available. Newer versions might have important and useful updates. Scroll down to the bottom of this page to view the Changelog.

*NB: Please note that the "disk" usage information reported for sshfs is not "real" -- this is how it is implemented in the sshfs program. It's not a MacFUSE issue.*

== Using the Graphical Application ==

There are two main parts to the sshfs application. The first is `File > Connect to SSH Server...`, which lets you specify the server you want to connect to, the username you want to use, and (optionally) the remote directory you want to mount.

When you click `Connect`, a short time will pass, and then sshfs will ask you for your password. Give your password, and the sshfs volume will appear on the desktop.

At this point, you're done with the `sshfs.app` application, and you may quit it if you like. When you're done with the remote server, just click the "eject" button that the Finder provides, or select it and choose `File > Eject`.

The second main part is a recent server list. From the list, you may select any server that you've successfully connected to in the past. The password dialog will come up, provide your password, and once again, you're all set.

== Using the Command Line ==

The `sshfs.app` bundle contains a binary called `sshfs-static`. This is the command-line `sshfs` program compiled such that it links dynamically with the FUSE user-space library, but statically with `libglib` and `libintl`. You can create a symbolic link called `sshfs` in `/usr/local/bin/` (or another place that you prefer) that points to this binary, and thus can use the command-line version too. If you prefer to use the command line, you can do something like:

{{{
# Mounting the SSH file system
$ mkdir /some/mount/point # or use one that already exists
$ sshfs user@host:/some/directory /some/mount/point -oreconnect,volname=<volname>
}}}

The `reconnect` option is useful when the network connection goes down and you have a mounted sshfs volume.

`<volname>` should be a string you wish to use as the name of the newly mounted volume. If everything went fine, you should see the volume on your Desktop and in the Finder (unless you have disabled remote volumes from showing up in these places).

Once you are done using sshfs, you can unmount the volume either using the eject icon in the Finder or other common user-interface means of ejecting. Alternatively, you can do the following from the command line:

{{{
$ umount /some/mount/point
}}}

== Changelog ==

=== sshfs(MacFUSE) 0.3.0 (May 7, 2007) ===

  * No changes to the user interface, which remains, and will remain, an *unsupported demo GUI wrapper*.
  * Fix for an sshfs crash that could occur when doing heavy I/O to a single file (such as while creating a large tarball or running `mkfile`).
  * Fix for an sshfs crash that could occur when doing heavy directory I/O in a heavily populated directory hierarchy (such as running multiple `find` commands on an sshfs volume, possibly in conjunction with some file reads).
  * Increased the timeout for the "daemon not responding" alert panel to 20 seconds from 10 seconds. On a slow link, 10 seconds wasn't enough with some heavily populated directory hierarchies. Of course, even 20 seconds may not be enough, but you can always use the `daemon_timeout` mount-time option.
  * User and group ID mapping is now *turned on* by default. This means that user/group IDs of the user logging in to the remote (SSH) machine will be automatically translated to the user/group IDs of the local user.

=== sshfs(MacFUSE) 0.2.0 (April 19, 2007) ===

  * Alert panel shown upon daemon timeout, giving the user the option to eject the sshfs volume.
  * Fixes for some "hangs" that users could experience under certain circumstances (such as saving a document in Microsoft Word).
  * `TCP_NODELAY` supported (and enabled by default) through the `sshnodelay.so` dynamic library that's preloaded into sshfs. This library is looked for in the same location as `sshfs-static`, in `/usr/local/lib/`, and in the current directory (in that order). If `sshnodelay.so` is not found, `TCP_NODELAY` is not enabled.
  * Fix for issue with pathname caching at the sshfs user daemon level. This could cause strange behavior after certain sequences of file system operations.
  * `ping_diskarb` is enabled by default in MacFUSE 0.2.5. If you don't want this option for some reason, you can turn it off through the `noping_diskarb` option.
  * The sshfs option `workaround=rename` is now enabled by default.
  * If the `kill_on_unmount` option (new in MacFUSE 0.2.5) is specified, the kernel will explicitly try to kill the sshfs daemon after the volume has been unmounted. This is to avoid the issue of the daemon "hanging around" even after a successful unmount.
  * Upon launching the application from its containing disk image, the user is given the option of copying the application to the Applications folder.

=== sshfs(MacFUSE) 0.1.0 (January 2007) ===

  * Initial binary release.